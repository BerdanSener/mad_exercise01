/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package at.ac.fhcampuswien

import kotlin.math.pow
import kotlin.math.roundToInt

class App {
    // Game logic for a number guessing game
    fun playNumberGame(digitsToGuess: Int = 4) {
        //TODO: build a menu which calls the functions and works with the return values
        val numbersToGuess = generateRandomNonRepeatingNumber(4)
    }

    /**
     * Generates a non-repeating number of a specified length between 1-9.
     *
     * Note: The function is designed to generate a number where each digit is unique and does not repeat.
     * It is important to ensure that the length parameter does not exceed the maximum possible length
     * for non-repeating digits (which is 9 excluding 0 for base-10 numbers).
     *
     * @param length The length of the non-repeating number to be generated.
     *               This dictates how many digits the generated number will have.
     * @return An integer of generated non-repeating number.
     *         The generated number will have a number of digits equal to the specified length and will
     *         contain unique, non-repeating digits.
     * @throws IllegalArgumentException if the length is more than 9 or less than 1.
     */
    val generateRandomNonRepeatingNumber: (Int) -> Int = { length ->
        //TODO implement the function

        val listOfUsedNumbers: MutableList<Int> = mutableListOf()
        var randomNumber = 0
        if (length in 1..9) {
            var i = 0
            var rand = 0
            var generatedNumber = 0.0
            while (randomNumber.toString().length < length) {
                do {
                    generatedNumber = Math.random() * 10
                    rand = generatedNumber.roundToInt()
                } while (rand !in 0..9 || (rand in listOfUsedNumbers))
                randomNumber += rand * 10.0.pow(i).roundToInt()
                println(randomNumber)
                listOfUsedNumbers.add(rand)
                i++
            }

        }
        else{
            throw IllegalArgumentException()
        }
        randomNumber   // return value is a placeholder
    }

    /**
     * Compares the user's input integer against a generated number for a guessing game.
     * This function evaluates how many digits the user guessed correctly and how many of those
     * are in the correct position. The game generates number with non-repeating digits.
     *
     * Note: The input and the generated number must both be numbers.
     * If the inputs do not meet these criteria, an IllegalArgumentException is thrown.
     *
     * @param input The user's input integer. It should be a number with non-repeating digits.
     * @param generatedNumber The generated number with non-repeating digits to compare against.
     * @return [CompareResult] with two properties:
     *         1. `n`: The number of digits guessed correctly (regardless of their position).
     *         2. `m`: The number of digits guessed correctly and in the correct position.
     *         The result is formatted as "Output: m:n", where "m" and "n" represent the above values, respectively.
     * @throws IllegalArgumentException if the inputs do not have the same number of digits.
     */
    val checkUserInputAgainstGeneratedNumber: (Int, Int) -> CompareResult = { input, generatedNumber ->
        //TODO implement the function
        val inputStr = input.toString()
        val generatedStr = generatedNumber.toString()

        if (inputStr.length != generatedStr.length) {
            throw IllegalArgumentException()
        }

        var correctDigits = 0
        var correctPosition = 0
        var alreadyCheckedNumbers: MutableList<Char> = mutableListOf<Char>()

        for (char in inputStr) {
            if (generatedStr.contains(char) && char !in alreadyCheckedNumbers) {
                alreadyCheckedNumbers.add(char)
                correctDigits++
            }
        }

        for (i in inputStr.indices) {
            if (inputStr[i] == generatedStr[i]) {
                correctPosition++
            }
        }

        CompareResult(correctDigits, correctPosition)
    }
}

fun main() {
    println("Hello World!")
    val app = App()
    app.playNumberGame(digitsToGuess = 4)
    // TODO: call the App.playNumberGame function with and without default arguments
}
